{"pageProps":{"title":"Change Log","unhydratedContent":{"compiledSource":"\"use strict\";\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar layoutProps = {};\nvar MDXLayout = \"wrapper\";\n\nfunction MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", null, \"V1.2\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Add customisation for telegram notification format\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Add button to reset headers\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Add SheetID to specify which Sheet to enter into. (Optional, Different from Spreadsheet ID)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Add analytics\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Add duplicate headers warning (Only works after formSG writes to it then can detect duplicate headers)\")), mdx(\"h2\", null, \"V1.1\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Added telegram group notification\")), mdx(\"h2\", null, \"V1.0\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"FormSG can be linked to Google Sheets\")));\n}\n\n;\nMDXContent.isMDXComponent = true;","renderedOutput":"<h2>V1.2</h2><ul><li>Add customisation for telegram notification format</li><li>Add button to reset headers</li><li>Add SheetID to specify which Sheet to enter into. (Optional, Different from Spreadsheet ID)</li><li>Add analytics</li><li>Add duplicate headers warning (Only works after formSG writes to it then can detect duplicate headers)</li></ul><h2>V1.1</h2><ul><li>Added telegram group notification</li></ul><h2>V1.0</h2><ul><li>FormSG can be linked to Google Sheets</li></ul>","scope":{}},"auth":null},"__N_SSG":true}